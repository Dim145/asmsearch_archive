@using AnimeSearch.Core
@{
    ViewData["Title"] = "Error";
    int page = ViewData["page"] is int p ? p : 0;

    int na = ViewData["na"] is int tmp ? tmp : 0;

    var tabErrors = ViewData["errors"] as Errors[] ?? Array.Empty<Errors>();
}

<link rel="stylesheet" href="css/Admin/Error.css"/>

<h1 class="text-danger">Liste des Erreurs.</h1>
<h2 class="text-danger">Contient les erreus <a data-toggle="tooltip" data-placement="top" title="Les erreus prévue sont celle qui sont attrapé (=catch) par le système (= les dev savent que cette erreur peut arrivé.)">'prévue'*</a> par le site (HTML inclus) et surevenue lors d'un chargement.</h2>

<p class="text-white">
    Cette page peut être utile pour détecter les sites ne pouvant plus être intérrogé par le serveur. 
    Mais les erreurs internes (autres que HTML) ne sont utile qu'a un développeur.
</p>

<div class="text-white">
    @for (var i = 0; i < tabErrors.Length; i++)
    {
        <div class="wrap-collabsible">
            <input id="collapsible-@i" class="toggle" type="checkbox">
            <label for="collapsible-@i" class="lbl-toggle">
                Dans @tabErrors[i].Zone à <span style="text-decoration: underline;">@tabErrors[i].Date.ToString("dd/MM/yyyy HH:mm:ss")</span>
                @(string.IsNullOrWhiteSpace(tabErrors[i].UserName) ? "" : $", par {tabErrors[i].UserName}"): <br/>
                @tabErrors[i].Exception.Message
            </label>
            <div class="collapsible-content">
                <div class="content-inner">
                    <pre class="stacktrace"> 
                        @{
                            WriteLiteral(tabErrors[i].Exception.StackTrace?.Replace("\n", "<br/>"));
                        }
                    </pre>
                            
                    @if (!string.IsNullOrWhiteSpace(tabErrors[i].HtmlResponse))
                    {
                        <div class="card-footer">
                            <iframe class="w-100" style="resize: vertical;" srcdoc='@tabErrors[i].HtmlResponse'></iframe>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    
    <div class="row">
        @if (page > 0)
        {
            <div class="col text-left">
                <a class="btn btn-dark border-white" asp-controller="Admin" asp-action="Error" asp-route-page="@(page - 1)">Précédent</a>
            </div>
        }
        
        @if (CoreUtils.Errors.Count > page * 10 + tabErrors.Length)
        {
            <div class="col text-right">
                <a class="btn btn-dark border-white" asp-controller="Admin" asp-action="Error" asp-route-page="@(page + 1)">Suivant</a>
            </div>
        }
    </div>
</div>

<script type="text/javascript" src="lib/netst/netstack.js"></script>
<script>
$('.stacktrace').netStack({
    frame: 'st-frame',
    type: 'st-type',
    method: 'st-method',
    paramsList: 'st-frame-params',
    paramType: 'st-param-type',
    paramName: 'st-param-name',
    file: 'st-file',
    line: 'st-line'
});
</script>