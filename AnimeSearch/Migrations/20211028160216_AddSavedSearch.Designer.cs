// <auto-generated />
using System;
using AnimeSearch.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnimeSearch.Migrations
{
    [DbContext(typeof(AsmsearchContext))]
    [Migration("20211028160216_AddSavedSearch")]
    partial class AddSavedSearch
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AnimeSearch.Database.Citations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("author_name");

                    b.Property<string>("Contenue")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("contenue");

                    b.Property<DateTime?>("DateAjout")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_ajout");

                    b.Property<bool>("IsValidated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_validated");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Citations");
                });

            modelBuilder.Entity("AnimeSearch.Database.Don", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double>("Amout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("amout");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<bool>("Done")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("done");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User_id");

                    b.ToTable("Dons");
                });

            modelBuilder.Entity("AnimeSearch.Database.IP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse_IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Adresse_IP");

                    b.Property<DateTime?>("Derniere_utilisation")
                        .HasColumnType("datetime2")
                        .HasColumnName("Derniere_utilisation");

                    b.Property<string>("Localisation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Localisation");

                    b.Property<int>("Users_ID")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("Id");

                    b.HasIndex("Users_ID");

                    b.ToTable("IP");
                });

            modelBuilder.Entity("AnimeSearch.Database.Recherche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Derniere_Recherche")
                        .HasColumnType("datetime2")
                        .HasColumnName("derniere_recherche");

                    b.Property<int>("Nb_recherches")
                        .HasColumnType("int")
                        .HasColumnName("nb_recherche");

                    b.Property<int>("User_ID")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<string>("recherche")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recherche");

                    b.HasKey("Id");

                    b.HasIndex("User_ID");

                    b.ToTable("Recherche");
                });

            modelBuilder.Entity("AnimeSearch.Database.SavedSearch", b =>
                {
                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SavedSearch");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Resultats");

                    b.HasKey("Search", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedSearch");
                });

            modelBuilder.Entity("AnimeSearch.Database.Sites", b =>
                {
                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("url");

                    b.Property<string>("CheminBaliseA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cheminBaliseA");

                    b.Property<byte>("Etat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("etat");

                    b.Property<string>("IdBase")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("idBase");

                    b.Property<bool>("Is_inter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_internationnal");

                    b.Property<string>("PostValues")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postValues");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("TypeSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("typeSite");

                    b.Property<string>("UrlIcon")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("urlIcon");

                    b.Property<string>("UrlSearch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("urlSearch");

                    b.HasKey("Url");

                    b.ToTable("Sites");

                    b.HasCheckConstraint("url_check", "([url] like 'http%.[a-z][a-z]%/')");
                });

            modelBuilder.Entity("AnimeSearch.Database.TypeSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Type_Site")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TypeSites");
                });

            modelBuilder.Entity("AnimeSearch.Database.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dernier_Acces_Admin")
                        .HasColumnType("datetime2")
                        .HasColumnName("Dernier_Acces_Admin");

                    b.Property<DateTime?>("Derniere_visite")
                        .HasColumnType("datetime2")
                        .HasColumnName("Derniere_visite");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Navigateur")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Navigateur");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("AnimeSearch.Database.Citations", b =>
                {
                    b.HasOne("AnimeSearch.Database.Users", "User")
                        .WithMany("Citations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Citations_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Database.Don", b =>
                {
                    b.HasOne("AnimeSearch.Database.Users", "User")
                        .WithMany("Dons")
                        .HasForeignKey("User_id")
                        .HasConstraintName("FK_Dons_Users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Database.IP", b =>
                {
                    b.HasOne("AnimeSearch.Database.Users", "User")
                        .WithMany("IPs")
                        .HasForeignKey("Users_ID")
                        .HasConstraintName("FK_IP_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Database.Recherche", b =>
                {
                    b.HasOne("AnimeSearch.Database.Users", "User")
                        .WithMany("Recherches")
                        .HasForeignKey("User_ID")
                        .HasConstraintName("FK_Recherche_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Database.SavedSearch", b =>
                {
                    b.HasOne("AnimeSearch.Database.Users", "User")
                        .WithMany("SavedSearch")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SavedSearchs_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Database.Users", b =>
                {
                    b.Navigation("Citations");

                    b.Navigation("Dons");

                    b.Navigation("IPs");

                    b.Navigation("Recherches");

                    b.Navigation("SavedSearch");
                });
#pragma warning restore 612, 618
        }
    }
}
