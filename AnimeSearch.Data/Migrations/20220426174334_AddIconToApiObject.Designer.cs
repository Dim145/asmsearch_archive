// <auto-generated />
using System;
using AnimeSearch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeSearch.Data.Migrations
{
    [DbContext(typeof(AsmsearchContext))]
    [Migration("20220426174334_AddIconToApiObject")]
    partial class AddIconToApiObject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnimeSearch.Data.Models.ApiFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("label");

                    b.HasKey("Id");

                    b.ToTable("ApiFilterTypes");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.ApiObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnimeIdUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("animeIdUrl");

                    b.Property<string>("AnimeSearchUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("animeSearchUrl");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("apiUrl");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("DiscoverUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discoverUrl");

                    b.Property<string>("GenresMoviesUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genresMoviesUrl");

                    b.Property<string>("GenresPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genresPath");

                    b.Property<string>("GenresTvUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genresTvUrl");

                    b.Property<string>("GlobalSearchUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("globalSearchUrl");

                    b.Property<string>("ImageBasePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imageBasePath");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("iconUrl");

                    b.Property<string>("MoviesIdUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("moviesIdUrl");

                    b.Property<string>("MoviesSearchUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("moviesSearchUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("OtherNamesUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("otherNamesUrl");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pageName");

                    b.Property<string>("PathInOnResObject")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pathInOnResObject");

                    b.Property<string>("PathToOnResults")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pathToOnResults");

                    b.Property<string>("PathToResults")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pathToResults");

                    b.Property<string>("SearchUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("searchUrl");

                    b.Property<string>("SingleSearchUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("singleSearchUrl");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("siteUrl");

                    b.Property<string>("TableFields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tableFields");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token");

                    b.Property<string>("TokenName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tokenName");

                    b.Property<string>("TvIdUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tvIdUrl");

                    b.Property<string>("TvSearchUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tvSearchUrl");

                    b.HasKey("Id");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.ApiObjectFilter", b =>
                {
                    b.Property<int>("IdApiObject")
                        .HasColumnType("int")
                        .HasColumnName("idObject");

                    b.Property<int>("IdApiFilter")
                        .HasColumnType("int")
                        .HasColumnName("idApiFilter");

                    b.Property<int?>("ApiFilterId")
                        .HasColumnType("int");

                    b.Property<int?>("ApiObjectId")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("IdApiObject", "IdApiFilter");

                    b.HasIndex("ApiFilterId");

                    b.HasIndex("ApiObjectId");

                    b.ToTable("ApiObjectFilter");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.ApiObjectSort", b =>
                {
                    b.Property<int>("IdApiObject")
                        .HasColumnType("int")
                        .HasColumnName("idObject");

                    b.Property<int>("IdApiSort")
                        .HasColumnType("int")
                        .HasColumnName("idApiSort");

                    b.Property<int?>("ApiObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ApiSortId")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("IdApiObject", "IdApiSort");

                    b.HasIndex("ApiObjectId");

                    b.HasIndex("ApiSortId");

                    b.ToTable("ApiObjectSort");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.ApiSort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("label");

                    b.HasKey("Id");

                    b.ToTable("ApiSortTypes");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Citations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("author_name");

                    b.Property<string>("Contenue")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("contenue");

                    b.Property<DateTime?>("DateAjout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("date_ajout")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<bool>("IsValidated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_validated");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Citations");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Don", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double>("Amout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("amout");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Date")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<bool>("Done")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("done");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User_id");

                    b.ToTable("Dons");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.IP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adresse_IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Adresse_IP");

                    b.Property<DateTime?>("Derniere_utilisation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Derniere_utilisation")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<string>("Localisation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Localisation");

                    b.Property<int>("Users_ID")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("Id");

                    b.HasIndex("Users_ID");

                    b.ToTable("IP", (string)null);
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Recherche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Derniere_Recherche")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("derniere_recherche")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("Nb_recherches")
                        .HasColumnType("int")
                        .HasColumnName("nb_recherche");

                    b.Property<byte>("Source")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("Source");

                    b.Property<int>("User_ID")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<string>("recherche")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recherche");

                    b.HasKey("Id");

                    b.HasIndex("User_ID");

                    b.ToTable("Recherche", (string)null);
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("Color");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NiveauAutorisation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Niveau_Requis");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.SavedSearch", b =>
                {
                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SavedSearch");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.Property<DateTime>("DateSauvegarde")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_Sauvegarde")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Resultats");

                    b.HasKey("Search", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedSearch");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Setting", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeletable");

                    b.Property<string>("JsonValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Json_Value");

                    b.Property<string>("TypeValue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("String")
                        .HasColumnName("Type");

                    b.HasKey("Name");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Sites", b =>
                {
                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("url");

                    b.Property<string>("CheminBaliseA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cheminBaliseA");

                    b.Property<byte>("Etat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("etat");

                    b.Property<string>("IdBase")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("idBase");

                    b.Property<bool>("Is_inter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_internationnal");

                    b.Property<string>("PostValues")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postValues");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("TypeSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("typeSite");

                    b.Property<string>("UrlIcon")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("urlIcon");

                    b.Property<string>("UrlSearch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("urlSearch");

                    b.HasKey("Url");

                    b.ToTable("Sites");

                    b.HasCheckConstraint("url_check", "([url] like 'http%.[a-z][a-z]%/')");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.TypeSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Type_Site");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TypeSites");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dernier_Acces_Admin")
                        .HasColumnType("datetime2")
                        .HasColumnName("Dernier_Acces_Admin");

                    b.Property<DateTime?>("Derniere_visite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Derniere_visite")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Navigateur")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Navigateur");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.ApiObjectFilter", b =>
                {
                    b.HasOne("AnimeSearch.Data.Models.ApiFilter", "ApiFilter")
                        .WithMany()
                        .HasForeignKey("ApiFilterId");

                    b.HasOne("AnimeSearch.Data.Models.ApiObject", "ApiObject")
                        .WithMany("Filters")
                        .HasForeignKey("ApiObjectId");

                    b.Navigation("ApiFilter");

                    b.Navigation("ApiObject");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.ApiObjectSort", b =>
                {
                    b.HasOne("AnimeSearch.Data.Models.ApiObject", "ApiObject")
                        .WithMany("Sorts")
                        .HasForeignKey("ApiObjectId");

                    b.HasOne("AnimeSearch.Data.Models.ApiSort", "ApiSort")
                        .WithMany()
                        .HasForeignKey("ApiSortId");

                    b.Navigation("ApiObject");

                    b.Navigation("ApiSort");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Citations", b =>
                {
                    b.HasOne("AnimeSearch.Data.Models.Users", "User")
                        .WithMany("Citations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Citations_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Don", b =>
                {
                    b.HasOne("AnimeSearch.Data.Models.Users", "User")
                        .WithMany("Dons")
                        .HasForeignKey("User_id")
                        .IsRequired()
                        .HasConstraintName("FK_Dons_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.IP", b =>
                {
                    b.HasOne("AnimeSearch.Data.Models.Users", "User")
                        .WithMany("IPs")
                        .HasForeignKey("Users_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_IP_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Recherche", b =>
                {
                    b.HasOne("AnimeSearch.Data.Models.Users", "User")
                        .WithMany("Recherches")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Recherche_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.SavedSearch", b =>
                {
                    b.HasOne("AnimeSearch.Data.Models.Users", "User")
                        .WithMany("SavedSearch")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SavedSearchs_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.ApiObject", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("Sorts");
                });

            modelBuilder.Entity("AnimeSearch.Data.Models.Users", b =>
                {
                    b.Navigation("Citations");

                    b.Navigation("Dons");

                    b.Navigation("IPs");

                    b.Navigation("Recherches");

                    b.Navigation("SavedSearch");
                });
#pragma warning restore 612, 618
        }
    }
}
